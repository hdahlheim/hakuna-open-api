openapi: 3.0.2
info:
  version: 0.0.1
  title: Hakuna-open-api
  description: Unoffical hakuna api spec
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
servers:
- url: https://{company}.hakuna.ch/api/{basePath}
  description: The production API server
  variables:
    company:
      default: example
    basePath:
      default: v1
security:
  - ApiToken: []
paths:
  /ping:
    get:
      tags:
        - test
      description: Test endpoint
      operationId: ping
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          description: Pong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pong'
        '429':
          $ref: '#/components/responses/RateLimit'
  /overview:
    get:
      tags:
        - personal
      description: Retrieves key numbers about your user, e.g. your current overtime.
      operationId: overview
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          description: key metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyMetrics'
        '429':
          $ref: '#/components/responses/RateLimit'
  /timer:
    get:
      tags:
        - personal
      description: Retrieves the timer.
      operationId: getTimer
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          description: Time Entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timer'
        '429':
          $ref: '#/components/responses/RateLimit'
    post:
      tags:
        - personal
      description: Start Timer
      operationId: startTime
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTimer'
      responses:
        '200':
          description: ok
        '429':
          $ref: '#/components/responses/RateLimit'
    put:
      tags:
        - personal
      description: End Timer
      operationId: endTimer
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndTimer'
      responses:
        '200':
          description: ok
    delete:
      tags:
        - personal
      description: Deletes the timer
      operationId: deleteTimer
      responses:
        '200':
          description: ok
        '429':
          $ref: '#/components/responses/RateLimit'
  /time_entries:
    get:
      tags:
        - personal
      parameters:
        - $ref: '#/components/parameters/user_id'
        - name: date
          in: query
          description: Date of time entry
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of time entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfTimeEntries'
        '429':
          $ref: '#/components/responses/RateLimit'
    post:
      tags:
        - personal
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTimeEntry'
      responses:
        '200':
          description: ok
        '429':
          $ref: '#/components/responses/RateLimit'
  /time_entries/{id}:
    get:
      tags:
        - personal
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Time entry id
      responses:
        '200':
          description: Time Entry with the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntries'
        '429':
          $ref: '#/components/responses/RateLimit'
    patch:
      tags:
        - personal
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Time entry id
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTimeEntry'
      responses:
        '200':
          description: ok
        '429':
          $ref: '#/components/responses/RateLimit'
    delete:
      tags:
        - personal
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Time entry id
      responses:
        '200':
          description: ok
        '429':
          $ref: '#/components/responses/RateLimit'
  /users:
    get:
      tags:
        - User
      description: |
        Retrieves all user you can manage (as admin or team leader). See here how to make requests for these users.
      operationId: listUsers
      responses:
        '200':
          description: List users you can manage
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/me:
    get:
      tags:
        - User
      description: |
        Retrives the currently authenticated user.
      operationId: getCurrentUser
      responses:
        '200':
          description: Authenticated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  parameters:
    user_id:
      in: query
      name: user_id
      required: false
      schema:
        type: integer
      example: 4
      description: |
        For these personal API endpoints you can supply an optional user_id parameter. This allows you to make requests in the context of a user you can manage. For example if you are an admin/team leader and would like to retrieve the time entries of another user, use e.g. GET /api/v1/time_entries?date=2016-11-08&user_id=4. To retrieve the list of users you can manage, see Users.

  responses:
    RateLimit:
      description: |
        Our API rate limits are setup per IP and tenant. We allow 4000 requests per hour.

        If the rate limit is being triggered, the response will have HTTP status 429 contain a corresponding JSON structure.
      headers:
        Retry-After:
          description: The Retry-After header will indicate how long the client should wait before trying again.
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Pong:
      type: object
      properties:
        pong:
          type: string
          format: date-time
    KeyMetrics:
      type: object
      properties:
        overtime:
          type: string
        overtime_in_secondes:
          type: integer
        vacation:
          type: object
          properties:
            redeemed_days:
              type: number
              format: float
            remaining_days:
              type: number
              format: float
    Timer:
      type: object
      properties:
        date:
          type: string
          format: date
        mode:
          type: string
          enum:
            - start_end
            - duration
        start_time:
          type: string
        duration_in_seconds:
          type: integer
        note:
          type: string
        user:
          $ref: '#/components/schemas/User'
        task:
          $ref: '#/components/schemas/Task'
        project:
          $ref: '#/components/schemas/Project'
    NewTimer:
      type: object
      required:
        - task_id
      properties:
        task_id:
          type: integer
        star_time:
          type: string
        duration:
          type: string
        project_id:
          type: integer
        note:
          type: string
    EndTimer:
      type: object
      properties:
        end_time:
          type: string
        duration:
          type: string
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        team:
          type: array
          items:
            type: string
    Task:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        archived:
          type: boolean
        default:
          type: boolean
    Project:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        client:
          type: string
        archived:
          type: boolean
        teams:
          type: array
          items:
            type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        buget:
          type: string
        buget_in_seconds:
          type: integer
        buget_is_monthly:
          type: boolean
    TimeEntries:
      allOf:
        - $ref: '#/components/schemas/Timer'
      properties:
        id:
          type: integer
        end_time:
          type: string
    ListOfTimeEntries:
      type: array
      items:
        $ref: '#/components/schemas/TimeEntries'
    NewTimeEntry:
      allOf:
        - $ref: '#/components/schemas/Timer'
      required:
        - date
      properties:
        date:
          type: string
          format: date
        end_time:
          type: string
    UpdateTimeEntry:
      required:
        - end_time
      properties:
        end_time:
          type: string
    Error:
      properties:
        error:
          type: string
      example:
        error: 'You sent too many requests, please try again later.'
  securitySchemes:
    ApiToken:
      type: apiKey
      in: header
      name: X-Auth-Token

